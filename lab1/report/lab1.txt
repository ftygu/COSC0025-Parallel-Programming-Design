实验目标
实验目标概括如下：
Cache 优化与矩阵向量内积计算：本实验旨在通过计算给定 n×n
n×n 矩阵的每一列与给定向量的内积，探究和实践两种算法设计思路——一种是逐列访问元素的基础算法，另一种是考虑cache优化的算法。通过编程实现这两种思路，并利用高精度计时测试它们的执行时间，旨在展示cache优化对算法性能的显著提升。
超标量优化与数列求和：本实验探索计算n个数求和的两种算法：一种是逐个累加的基础算法，另一种是适合超标量架构的指令级并行算法，例如两路链式累加或递归相加算法。通过编程实现这些算法并比较它们的性能，实验旨在揭示指令级并行优化对性能的影响。
性能分析工具的应用：利用性能分析工具（如prof和uprof）对上述算法进行深入分析，通过运行计时和事件计数的方法，量化普通算法与优化算法之间的性能差异。这一步骤旨在提供一个量化基础，以科学地评价不同算法设计思路的效率。
实验设计及分析

1
针对给定的问题，由于矩阵在内存中存储时按照行有限的顺序存储的，也就是说，在内存中的矩
阵是按行紧密排列的。因此，对于原始朴素的逐列访问算法来说，CPU 会一次读入连续的一段数据到
缓存中，其中可能只包含需要计算一个元素，因此当计算该列的第二个元素的时候，CPU 又需要到更
低的缓存或内存中去读取所需要的元素，而访存的时间相较于运算来说，开销是很大的，这会在很大
程度上降低程序运行的效率。
因此我们考虑改进算法，采用逐行访问的 cache 优化算法，即充分利用每次读入的数据，将当前
读入的缓存中的一行数据全部进行计算，然后累加到结果数组的对应位置，虽然在这个过程中并没有
能够直接计算出结果，但是极大利用了 cache 中的缓存数据，减少去内存中寻找数据的访存时间。
同时，为了能够降低循环访问过程中，条件判断，指令跳转等额外开销，我们对于逐行访问的算
法进行了进一步优化，采用循环展开的方法，在一次循环中，同时计算 2 个位置的值，可以利用多条
流水线同时作业，发挥 CPU 超标量计算的性能。

2
对于给定的问题，要求计算 N 个数的和，对于常规的顺序算法而言，由于每次都是在同一个累加
变量上进行累加，导致只能调用 CPU 的一条流水线进行处理，无法充分发挥 CPU 超标量优化的性
能，因此考虑使用多链路的方法对传统的链式累加方法进行改进，即设置多个临时变量，在一个循环
内同时用着多个临时变量对多个不同的位置进行累加，达到多个位置并行累加的效果，同时还能够减
少循环遍历的步长，降低循环开销。由于多链路方法使用了循环展开技术在一定程度上降低了循环的
额外开销，为了保证实验的准确性，我们对普通的链式累加方法也要进行同样比例的循环展开，控制
实验的可变因素，使得实验结果具有合理的对比性。
通过对比在不同实验规模下的两种方法的运行时间，探究优化加速比同问题规模的变化情况，并
分析其中的内在原因。此外，还将会探究在 x86 架构下，Windows 和 Linux 两种系统对于处理同样规
模的问题所需要消耗的绝对时间，以及优化的加速比的情况。

总结


